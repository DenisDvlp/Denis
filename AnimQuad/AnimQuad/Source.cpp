#include <iostream>
#include <cmath>
using namespace std;

int main()
{
	//ќЅЏя¬Ћ≈Ќ»≈ ѕ≈–≈ћ≈ЌЌџ’
	const float PI = 3.1415927;
	int N = 17; //размер координатных четвертей
	float
		degree = 0, //угол поворота
		R = 10, //полудиагональ квадрата
		X = 0, Y = 0; //одна из вершин квадрата

	while (true) {
		//находим новые координаты одной из вершин квадрата
		X = cos(degree * PI / 180) * R;
		Y = sin(degree * PI / 180) * R;
		//очистка экрана
		system("cls");
		//рисуем координатную сетку
		for (int y = N; y >= -N; y--) {
			for (int x = -N; x <= N; x++) {
				//рисуем грани только в радиусе полудиаметра квадрата
				//сдвиг координат на 0.5 нужен дл¤ центрировани¤
				//т.е. компенсации во врем¤ отрисовки линий
				if ((x - 0.5) * (x - 0.5) + (y - 0.5) * (y - 0.5) <= (R + 0.5) * (R + 0.5))
					//проходим по вершинам квадрата
					//1---2
					//|   |
					//4---3
					for (int i = 0; i < 4; i++) {
						float X1 = 0, Y1 = 0, X2 = 0, Y2 = 0;
						switch (i) {
						case 0:
							//1-2
							X1 = -Y; Y1 = X;
							X2 = X; Y2 = Y;
							break;
						case 1:
							//2-3
							X1 = X; Y1 = Y;
							X2 = Y; Y2 = -X;
							break;
						case 2:
							//3-4
							X1 = Y; Y1 = -X;
							X2 = -X; Y2 = -Y;
							break;
						case 3:
							//1-4
							X1 = -Y; Y1 = X;
							X2 = -X; Y2 = -Y;
							break;
						}
						//вспомогательные расчЄты по формуле нахождени¤ пр¤мой между двум¤ точками
						float
							A = (Y1 - Y2),
							B = (X2 - X1),
							C = (X1 * Y2 - X2 * Y1),
							Yexp = -(A * x + C) / B,
							Xexp = -(B * y + C) / A;
						//если нашли нужную точку, то отмечаем еЄ и выходим
						if (y >= Yexp && y < Yexp + 1 || x >= Xexp && x < Xexp + 1) {
							cout << "[]";
							break;
						}
						else
							//если не нашли точки, то заполн¤ем пробелом и выходим
							if (i == 3)
								cout << "  ";
					}
				else
					cout << "  ";
			}
			cout << "\n";
		}
		//задержка 0.2 секунды
		for (double i = 0; i<10000000; i += 1.1234567);
		//поворот на 4 градуса
		degree += 34;

	}
}